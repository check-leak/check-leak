/*
 * JBoss, Home of Professional Open Source.
 * Copyright 2007-2008, Red Hat Middleware LLC, and individual contributors
 * as indicated by the @author tags. See the copyright.txt file in the
 * distribution for a full listing of individual contributors.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */

package io.github.checkleak.core;

import java.lang.ref.WeakReference;

/**
 * 
 * This class is used to hold the metadata on memory profiler, being generated by CheckLeak
 *
 * @author Clebert Suconic
 */
public class InventoryDataPoint implements Comparable<InventoryDataPoint>
{

   /**
    * 
    * @param clazz The class used for this metadata
    */
   public InventoryDataPoint(final Class<?> clazz)
   {
      this.clazz = new WeakReference<Class<?>>(clazz);
   }

   /**
    * 
    * @param clazz The class used for this metadata
    * @param instances Number of instances
    */
   public InventoryDataPoint(final Class<?> clazz, final int instances)
   {
      this(clazz);
      this.instances = instances;
   }

   /** The class */
   private WeakReference<Class<?>> clazz;

   /** # instances */
   int instances;

   /** # bytes */
   long bytes;

   /**
    * return bytes
    * @return bytes
    */
   public long getBytes()
   {
      return bytes;
   }

   /**
    * set bytes
    * @param bytes # bytes
    */
   public void setBytes(final long bytes)
   {
      this.bytes = bytes;
   }

   /**
    * Return the class used on the metadata
    * @return the class
    */
   public Class<?> getClazz()
   {
      return clazz.get();
   }

   /**
    * Set the class used by the metadata
    * @param clazz The class
    */
   public void setClazz(final Class<?> clazz)
   {
      this.clazz = new WeakReference<Class<?>>(clazz);
   }

   /**
    * Get the number of instances
    * @return # instances
    */
   public int getInstances()
   {
      return instances;
   }

   /**
    * Set the number of instances 
    * 
    * @param instances # instances
    */
   public void setInstances(final int instances)
   {
      this.instances = instances;
   }

   /**
    * Used to order datasets and collections
    * @param o the point being compared
    * @return look at {@link Comparable#compareTo(Object)}
    */
   public int compareTo(final InventoryDataPoint o)
   {
      InventoryDataPoint that = o;
      long result = that.bytes -
            bytes;
      if (result == 0)
      {
         return 0;
      }
      else if (result > 0)
      {
         return 1;
      }
      else
      {
         return -1;
      }
   }

}
